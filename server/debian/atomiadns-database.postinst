#!/bin/sh

pg_user=`grep -i PostgreSQL /etc/passwd | cut -d : -f 1`
if [ -z "$pg_user" ]; then
	echo "unable to find postgresql user, defaulting to postgres"
	pg_user="postgres"
fi

sudo="sudo -u $pg_user"
psql="$sudo psql"

sha1=`which sha1sum 2> /dev/null`
if [ -z "$sha1" ]; then
	sha1=`which sha1 2> /dev/null`
fi

if [ -z "$sha1" ]; then
	echo "can't find sha1 tool, exiting"
	exit 1
fi

if [ -d "/usr/share/atomiadns" ]; then
	basedir="/usr/share/atomiadns"
elif [ -d "/usr/local/share/atomiadns" ]; then
	basedir="/usr/local/share/atomiadns"
else
	echo "can't find schema install location"
	exit 1
fi

createschema() {
	password=`dd if=/dev/urandom bs=1024 count=1 2>/dev/null | "$sha1" | cut -d " " -f 1`
	if [ -z "$password" ]; then
		echo "error generating random password"
		exit 1
	fi

	if [ ! -f "/etc/atomiadns.conf" ]; then
		if [ -f "$basedir/conf/atomiadns.conf" ]; then
			cp "$basedir/conf/atomiadns.conf" /etc
		elif [ -f "$basedir/conf/atomiadns-database.conf" ]; then
			cp "$basedir/conf/atomiadns-database.conf" /etc/atomiadns.conf
		else
			echo "no config found"
			exit 1
		fi
	fi

	if grep '%password$' /etc/atomiadns.conf > /dev/null; then
		echo "Autogenerating the atomiadns role"

		$psql zonedata -c "CREATE ROLE atomiadns WITH LOGIN UNENCRYPTED PASSWORD '$password' SUPERUSER" > /dev/null 2>&1
		if [ $? != 0 ]; then
			echo "error creating role atomiadns, you will have to make sure that the schema matches $basedir/schema manually"
			exit 1
		fi

		sed -i -e "s/%password/$password/g" /etc/atomiadns.conf || exit 1
	else
		echo "/etc/atomiadns.conf doesn't contain %password, assuming that the role is already created"
	fi

	existing_languages=`$sudo createlang -d zonedata -l 2>&1`
	if [ $? != 0 ]; then
		echo "error finding existing languages in zonedata, you will have to make sure that the schema matches $basedir/schema manually"
		exit 1
	elif echo "$existing_languages" | grep plpgsql > /dev/null; then
		echo "language plpgsql already added by default when zonedata was created, skipping"
	else
		$sudo createlang -d zonedata plpgsql > /dev/null 2>&1
		if [ $? != 0 ]; then
			echo "error adding plpgsql as language in zonedata, you will have to make sure that the schema matches $basedir/schema manually"
			exit 1
		fi
	fi

	"$basedir/schema/schema.sh" > /dev/null 2>&1
	if [ $? != 0 ]; then
		echo "error importing schema, you will have to make sure that the schema matches $basedir/schema manually"
		exit 1
	fi
}

recreate_procedure() {
	if ! [ -f "$basedir/schema/$1.sql" ]; then
		echo "$basedir/schema/$1.sql doesn't exist, you'll have to migrate the schema manually."
		exit 1
	fi

	drop_sql=`$psql -c '\df '"$1" zonedata 2>&1`
	if [ $? != 0 ]; then
		echo "error fetching sql to drop procedure $1, you'll have to migrate the schema manually."
		exit 1
	fi

	drop_sql=`echo "$drop_sql" | awk -F "|" '/public/ { print "DROP FUNCTION " $2 "(" $4 ")" }'`
	$psql -c "$drop_sql" zonedata > /dev/null 2>&1
	if [ $? != 0 ]; then
		echo "error dropping procedure $1, you'll have to migrate the schema manually."
		exit 1
	fi

	procedure_sql=`cat "$basedir/schema/$1.sql"`
	if [ $? != 0 ]; then
		echo "error retrieving ddl for procedure $1, you'll have to migrate the schema manually."
		exit 1
	fi

	$psql -c "$procedure_sql" zonedata > /dev/null 2>&1
	if [ $? != 0 ]; then
		echo "error recreating procedure $1, you'll have to migrate the schema manually."
		exit 1
	fi
}

recreate_ddl_procedure() {
	procedure_sql=`awk '/^CREATE OR REPLACE FUNCTION '"$1"'/ { inproc = 1 } inproc { print } /^END.*LANGUAGE plpgsql;$/ { inproc = 0 }' "$basedir/schema/ddl.sql"`
	if [ $? != 0 ]; then
		echo "error retrieving ddl for procedure $1, you'll have to migrate the schema manually."
		exit 1
	fi

	$psql -c "$procedure_sql" zonedata > /dev/null 2>&1
	if [ $? != 0 ]; then
		echo "error recreating procedure $1, you'll have to migrate the schema manually."
		exit 1
	fi
}

create_table() {
	table_sql=`awk '/^CREATE TABLE '"$1"' / { intable = 1 } intable { print } /^\);$/ { intable = 0 }' "$basedir/schema/ddl.sql"`
	if [ $? != 0 ]; then
		echo "error retrieving ddl for table $1, you'll have to migrate the schema manually."
		exit 1
	fi

	$psql -c "$table_sql" zonedata > /dev/null 2>&1
	if [ $? != 0 ]; then
		echo "error creating table $1 using schema $table_sql, you'll have to migrate the schema manually."
		exit 1
	fi
}

create_trigger() {
	trigger_sql=`awk '/^CREATE CONSTRAINT TRIGGER '"$1"'/ { intable = 1 } intable { print } /;$/ { intable = 0 }' "$basedir/schema/ddl.sql"`
	if [ $? != 0 ]; then
		echo "error retrieving ddl for trigger $1, you'll have to migrate the schema manually."
		exit 1
	fi

	$psql -c "$trigger_sql" zonedata > /dev/null 2>&1
	if [ $? != 0 ]; then
		echo "error creating trigger $1 using schema $table_sql, you'll have to migrate the schema manually."
		exit 1
	fi
}

alter_check_constraint() {
	table="$1"
	constraint_name="$2"
	constraint="$3"

	query="ALTER TABLE $table DROP CONSTRAINT $constraint_name; ALTER TABLE $table ADD CONSTRAINT $constraint_name CHECK $constraint"

	$psql -c "$query" zonedata > /dev/null 2>&1
	if [ $? != 0 ]; then
		echo "error altering check constraint $table/$constraint_name using $query, you'll have to migrate the schema manually."
		exit 1
	fi
}

execute_query() {
	query="$1"

	$psql -c "$query" zonedata > /dev/null 2>&1
	if [ $? != 0 ]; then
		echo "error executing migration query: $query, you'll have to migrate the schema manually."
		exit 1
	fi
}

alter_table_addcolumn() {
	table="$1"
	column="$2"

	query="ALTER TABLE $table ADD COLUMN $column"

	$psql -c "$query" zonedata > /dev/null 2>&1
	if [ $? != 0 ]; then
		echo "error adding column $table.$column, you'll have to migrate the schema manually."
		exit 1
	fi
}

set_schema_version() {
	$psql -c "UPDATE atomiadns_schemaversion SET version = $1" zonedata > /dev/null 2>&1
	if [ $? != 0 ]; then
		echo "error updating schema-version to $1, you'll have to do it manually."
		exit 1
	fi
}

$sudo createdb zonedata > /dev/null 2>&1
if [ $? != 0 ]; then

	schema_version=`$psql -qAt zonedata -c "SELECT version FROM atomiadns_schemaversion" 2> /dev/null`
	if [ $? != 0 ] || [ -z "$schema_version" ]; then
		echo "database zonedata already exist, but doesn't contain the atomiadns schema. You will have to make sure that the schema matches $basedir/schema manually"
		exit 1
	else
		latest_version="71"

		if [ "$schema_version" = "$latest_version" ]; then
			echo "The installed schema is the latest version, keeping the database as it is."
		elif [ -n "$(echo "$schema_version" | grep -E '^[0-9]+$')" ] && [ "$schema_version" -lt "$latest_version" ]; then
			echo "Schema version is $schema_version, and the latest database schema is version $latest_version. Upgrading."

			if [ "$schema_version" -lt 11 ]; then
				recreate_procedure "setupdatesdisabled"
				recreate_procedure "deletezone"
				recreate_procedure "adddnsrecords"
				recreate_procedure "copydnslabelbulk"
				recreate_procedure "getlabels"
				recreate_procedure "getzone"

				alter_check_constraint "label" "label_format" "(label ~* '^(([*][.])?([a-z0-9_][a-z0-9_-]*)([.][a-z0-9_][a-z0-9_-]*)*)|[@*]\$')" 
			fi

			if [ "$schema_version" -lt 12 ]; then
				create_table "nameserver_group"
				execute_query "INSERT INTO nameserver_group (name) VALUES ('default')"

				alter_table_addcolumn "nameserver" "nameserver_group_id INT REFERENCES nameserver_group"
				execute_query "UPDATE nameserver SET nameserver_group_id = (SELECT id FROM nameserver_group WHERE name = 'default') WHERE nameserver_group_id IS NULL"
				execute_query "ALTER TABLE nameserver ALTER COLUMN nameserver_group_id SET NOT NULL"

				alter_table_addcolumn "zone" "nameserver_group_id INT REFERENCES nameserver_group"
				execute_query "UPDATE zone SET nameserver_group_id = (SELECT id FROM nameserver_group WHERE name = 'default') WHERE nameserver_group_id IS NULL"
				execute_query "ALTER TABLE zone ALTER COLUMN nameserver_group_id SET NOT NULL"
				execute_query "CREATE INDEX zone_nameserver_group_idx ON zone(nameserver_group_id)"

				recreate_procedure "restorezone"
				recreate_procedure "editzone"
				recreate_procedure "addzone"
				recreate_procedure "addnameserver"
				recreate_procedure "getnameservergroup"
				recreate_procedure "setnameservergroup"

				recreate_ddl_procedure "verify_zone"
			fi

			if [ "$schema_version" -lt 13 ]; then
				recreate_procedure "addnameservergroup"
				recreate_procedure "deletenameservergroup"
			fi

			if [ "$schema_version" -lt 14 ]; then
				create_table "slavezone"
				create_table "slavezone_change"
				recreate_ddl_procedure "slavezone_update"
				create_trigger "slavezone_update_trigger"
			fi

			if [ "$schema_version" -lt 17 ]; then
				alter_check_constraint "slavezone" "master_format" "(master ~* '^(([a-z0-9]([a-z0-9]{0,4}:)+(%[a-z0-9])?)|(([0-9]+[.]){3}[0-9]+))\$')"
				recreate_procedure "addslavezone"
				recreate_procedure "deleteslavezone"
				recreate_procedure "getchangedslavezones"
				recreate_procedure "markslavezoneupdated"
			fi

			if [ "$schema_version" -lt 18 ]; then
				recreate_procedure "getslavezone"
			fi

			if [ "$schema_version" -lt 20 ]; then
				recreate_procedure "reloadallslavezones"
				recreate_procedure "reloadallzones"
				recreate_procedure "getslavezone"
			fi

			if [ "$schema_version" -lt 24 ]; then
				recreate_procedure "markallupdatedexcept"
				recreate_procedure "getchangedzones"
			fi

			if [ "$schema_version" -lt 26 ]; then
				recreate_procedure "adddnsrecords"
			fi

			if [ "$schema_version" -lt 27 ]; then
				execute_query "UPDATE allowed_type SET regexp = '"'^"[^"]{0,255}"$'"' WHERE type = 'TXT'"
			fi

			if [ "$schema_version" -lt 28 ]; then
				execute_query "ALTER TABLE allowed_type ALTER COLUMN regexp TYPE TEXT"
				execute_query "UPDATE allowed_type SET regexp = '"'^((([0-9A-Fa-f]{1,4}:){7}(([0-9A-Fa-f]{1,4})|:))|(([0-9A-Fa-f]{1,4}:){6}(:|((25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})|(:[0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){5}((:((25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(([0-9A-Fa-f]{1,4}:){4}(:[0-9A-Fa-f]{1,4}){0,1}((:((25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(([0-9A-Fa-f]{1,4}:){3}(:[0-9A-Fa-f]{1,4}){0,2}((:((25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(([0-9A-Fa-f]{1,4}:){2}(:[0-9A-Fa-f]{1,4}){0,3}((:((25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(([0-9A-Fa-f]{1,4}:)(:[0-9A-Fa-f]{1,4}){0,4}((:((25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(:(:[0-9A-Fa-f]{1,4}){0,5}((:((25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})))(%.+)?$'"' WHERE type = 'AAAA'"
			fi

			if [ "$schema_version" -lt 29 ]; then
				recreate_ddl_procedure "verify_record"
			fi

			if [ "$schema_version" -lt 31 ]; then
				recreate_procedure "allowzonetransfer"
				recreate_procedure "getallowedzonetransfer"
				recreate_procedure "deleteallowedzonetransfer"
				recreate_procedure "deletezone"
				create_table "allow_zonetransfer"
			fi

			if [ "$schema_version" -lt 34 ]; then
				recreate_procedure "getnameserver"
				execute_query "UPDATE allowed_type SET regexp = '"'^[0-9]+ [0-9]+ "[^"]*" "[^"]*" "[^"]*" ([a-z0-9_][a-z0-9._-]+)?[.]$'"' WHERE type = 'NAPTR'"
			fi

			if [ "$schema_version" -lt 35 ]; then
				recreate_procedure "deletenameserver"
			fi

			if [ "$schema_version" -lt 36 ]; then
				recreate_procedure "markallupdatedexceptbulk"
			fi

			if [ "$schema_version" -lt 37 ]; then
				recreate_procedure "markupdatedbulk"
			fi

			if [ "$schema_version" -lt 38 ]; then
				recreate_procedure "getzonebulk"
			fi

			if [ "$schema_version" -lt 39 ]; then
				execute_query "CREATE INDEX change_zone_index ON change(zone, nameserver_id)"
			fi

			if [ "$schema_version" -lt 40 ]; then
				recreate_procedure "getzonebulk"
			fi

			if [ "$schema_version" -lt 41 ]; then
				execute_query "ALTER TABLE slavezone DROP CONSTRAINT slavezone_master_key"
			fi

			if [ "$schema_version" -lt 42 ]; then
				execute_query "CREATE TYPE dnsseckeytype AS ENUM('KSK', 'ZSK')"
				execute_query "CREATE TYPE algorithmtype AS ENUM('RSASHA1', 'RSASHA256', 'RSASHA512')"
				create_table "dnssec_keyset"
				recreate_procedure "activatednsseckey"
				recreate_procedure "adddnsseckey"
				recreate_procedure "deactivatednsseckey"
				recreate_procedure "deletednsseckey"
				recreate_procedure "getchangedzonesbatch"
				recreate_procedure "getdnsseckeys"
			fi

			if [ "$schema_version" -lt 45 ]; then
				recreate_procedure "getdnsseckeys"
			fi

			if [ "$schema_version" -lt 48 ]; then
				recreate_procedure "getdnsseczskinfo"
				recreate_procedure "deactivatednsseckey"
			fi

			if [ "$schema_version" -lt 49 ]; then
				execute_query "CREATE INDEX label_zone_id ON label(zone_id)"
			fi

			if [ "$schema_version" -lt 53 ]; then
				recreate_ddl_procedure "verify_zone"
			fi

			if [ "$schema_version" -lt 54 ]; then
				execute_query "ALTER TABLE slavezone DROP CONSTRAINT master_format"
				execute_query "ALTER TABLE slavezone ADD CONSTRAINT master_format CHECK (master ~* '^(([a-z0-9]([a-z0-9]{0,4}:)+(%[a-z0-9])?)|(([0-9]+[.]){3}[0-9]+))(,(([a-z0-9]([a-z0-9]{0,4}:)+(%[a-z0-9])?)|(([0-9]+[.]){3}[0-9]+)))*\$');"
			fi

			if [ "$schema_version" -lt 58 ]; then
				execute_query "ALTER TABLE slavezone ADD COLUMN tsig_secret VARCHAR(255) CONSTRAINT tsig_format CHECK (tsig_secret IS NULL OR tsig_secret ~* '^[a-zA-Z0-9+/=]*')"
			fi

			if [ "$schema_version" -lt 59 ]; then
				execute_query "ALTER TABLE slavezone ADD COLUMN tsig_name VARCHAR(255) CONSTRAINT tsig_name_format CHECK (tsig_name IS NULL OR tsig_name ~* '^[a-zA-Z0-9_-]*')"
				recreate_procedure "getslavezone"
				recreate_procedure "addslavezone"
			fi

			if [ "$schema_version" -lt 60 ]; then
				create_table "dnssec_external_key"
				recreate_procedure "getexternaldnsseckeys"
				recreate_procedure "deleteexternaldnsseckey"
				recreate_procedure "addexternaldnsseckey"
			fi

			if [ "$schema_version" -lt 61 ]; then
				create_table "account"
				execute_query "ALTER TABLE zone ADD COLUMN account_id INT NULL REFERENCES account"
				recreate_procedure "addaccount"
				recreate_procedure "deleteaccount"
				recreate_procedure "editaccount"
			fi

			if [ "$schema_version" -lt 62 ]; then
				recreate_procedure "getnameservergroups"
				execute_query "ALTER TABLE slavezone ADD COLUMN account_id INT NULL REFERENCES account"
			fi

			if [ "$schema_version" -lt 68 ]; then
				recreate_procedure "authorizeslavezones"
				recreate_procedure "authorizezones"
				recreate_procedure "addzoneauth"
				recreate_procedure "addslavezoneauth"
				recreate_procedure "findzones"
				recreate_procedure "noop"
			fi

			if [ "$schema_version" -lt 69 ]; then
				execute_query "DROP TRIGGER record_constraint ON record"
				execute_query "CREATE CONSTRAINT TRIGGER record_constraint AFTER INSERT OR UPDATE ON record DEFERRABLE INITIALLY DEFERRED FOR EACH ROW EXECUTE PROCEDURE verify_record()"
			fi

			if [ "$schema_version" -lt 70 ]; then
				recreate_procedure "restorezoneauth"
			fi

			if [ "$schema_version" -lt 71 ]; then
				alter_check_constraint "slavezone" "master_format" "(master ~* '^(([0-9]+[.]){3}[0-9]+)|(((([0-9A-Fa-f]{1,4}:){7}(([0-9A-Fa-f]{1,4})|:))|(([0-9A-Fa-f]{1,4}:){6}(:|((25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})|(:[0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){5}((:((25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(([0-9A-Fa-f]{1,4}:){4}(:[0-9A-Fa-f]{1,4}){0,1}((:((25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(([0-9A-Fa-f]{1,4}:){3}(:[0-9A-Fa-f]{1,4}){0,2}((:((25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(([0-9A-Fa-f]{1,4}:){2}(:[0-9A-Fa-f]{1,4}){0,3}((:((25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(([0-9A-Fa-f]{1,4}:)(:[0-9A-Fa-f]{1,4}){0,4}((:((25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(:(:[0-9A-Fa-f]{1,4}){0,5}((:((25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})?)|((:[0-9A-Fa-f]{1,4}){1,2})))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9]{1,2})){3})))(%.+)?)\$')"
			fi

			set_schema_version "$latest_version"
		else
			echo "database zonedata already exist, but contains a bad schema version ($schema_version), this should never happen and indicates a bug."
			exit 1
		fi
	fi
else
	echo "No schema installed, installing into zonedata."
	createschema
fi
