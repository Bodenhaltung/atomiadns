#!/bin/sh

createschema() {
	password=`dd if=/dev/urandom bs=1024 count=1 status=noxfer 2>/dev/null | sha1sum | cut -d " " -f 1`
	if [ -z "$password" ]; then
		echo "error generating random password"
		exit 1
	fi

	if [ ! -f "/etc/ucpdns.conf" ]; then
		cp /usr/share/ucpdns/conf/ucpdns.conf /etc
	fi

	TMPFILE=`mktemp /tmp/ucpdns.XXXXXXXXXX` || exit 1
	sed "s/%password/$password/g" < /etc/ucpdns.conf > "$TMPFILE" || exit 1
	mv "$TMPFILE" /etc/ucpdns.conf || exit 1
	chmod a+r /etc/ucpdns.conf || exit 1

	sudo -u postgres psql -c "CREATE ROLE ucpdns WITH LOGIN UNENCRYPTED PASSWORD '$password' SUPERUSER" > /dev/null 2>&1
	if [ $? != 0 ]; then
		echo "error creating role ucpdns, you will have to make sure that the schema matches /usr/share/ucpdns/schema manually"
		exit 1
	fi

	sudo -u postgres createlang -d zonedata plpgsql > /dev/null 2>&1
	if [ $? != 0 ]; then
		echo "error adding plpgsql as language in zonedata, you will have to make sure that the schema matches /usr/share/ucpdns/schema manually"
		exit 1
	fi

	/usr/share/ucpdns/schema/schema.sh > /dev/null 2>&1
	if [ $? != 0 ]; then
		echo "error importing schema, you will have to make sure that the schema matches /usr/share/ucpdns/schema manually"
		exit 1
	fi
}

recreate_procedure() {
	if ! [ -f "/usr/share/ucpdns/schema/$1.sql" ]; then
		echo "/usr/share/ucpdns/schema/$1.sql doesn't exist, you'll have to migrate the schema manually."
		exit 1
	fi

	drop_sql=`sudo -u postgres psql -c '\df '"$1" zonedata 2>&1`
	if [ $? != 0 ]; then
		echo "error fetching sql to drop procedure $1, you'll have to migrate the schema manually."
		exit 1
	fi

	drop_sql=`echo "$drop_sql" | awk -F "|" '/public/ { print "DROP FUNCTION " $2 "(" $4 ")" }'`
	sudo -u postgres psql -c "$drop_sql" zonedata > /dev/null 2>&1
	if [ $? != 0 ]; then
		echo "error dropping procedure $1, you'll have to migrate the schema manually."
		exit 1
	fi

	procedure_sql=`cat "/usr/share/ucpdns/schema/$1.sql"`
	if [ $? != 0 ]; then
		echo "error retrieving ddl for procedure $1, you'll have to migrate the schema manually."
		exit 1
	fi

	sudo -u postgres psql -c "$procedure_sql" zonedata > /dev/null 2>&1
	if [ $? != 0 ]; then
		echo "error recreating procedure $1, you'll have to migrate the schema manually."
		exit 1
	fi
}

set_schema_version() {
	sudo -u postgres psql -c "UPDATE ucpdns_schemaversion SET version = $1" zonedata > /dev/null 2>&1
	if [ $? != 0 ]; then
		echo "error updating schema-version to $1, you'll have to do it manually."
		exit 1
	fi
}

sudo -u postgres createdb zonedata > /dev/null 2>&1
if [ $? != 0 ]; then

	schema_version=`sudo -u postgres psql -qAt zonedata -c "SELECT version FROM ucpdns_schemaversion" 2> /dev/null`
	if [ $? != 0 ] || [ -z "$schema_version" ]; then
		echo "database zonedata already exist, but doesn't contain the ucpdns schema. You will have to make sure that the schema matches /usr/share/ucpdns/schema manually"
		exit 1
	else
		if [ $schema_version = 4 ]; then
			echo "The installed schema is the latest version, keeping the database as it is."
		elif [ $schema_version = 1 ] || [ $schema_version = 2 ] || [ $schema_version = 3 ]; then
			echo "Schema version is $schema_version, and the latest database schema is version 4. Upgrading."
			if [ $schema_version -lt 3 ]; then 
				recreate_procedure "deletezone"
			fi

			recreate_procedure "setupdatesdisabled"
			set_schema_version 4
		else
			echo "database zonedata already exist, but contains a bad schema version ($schema_version), this should never happen and indicates a bug."
			exit 1
		fi
	fi
else
	echo "No schema installed, installing into zonedata."
	createschema
fi
