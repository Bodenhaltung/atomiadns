#!/bin/sh

createschema() {
	password=`dd if=/dev/urandom bs=1024 count=1 status=noxfer 2>/dev/null | sha1sum | cut -d " " -f 1`
	if [ -z "$password" ]; then
		echo "error generating random password"
		exit 1
	fi

	if [ ! -f "/etc/atomiadns.conf" ]; then
		if [ -f "/usr/share/atomia/conf/atomiadns.conf.atomiapowerdns-database" ]; then
			cp /usr/share/atomia/conf/atomiadns.conf.atomiapowerdns-database /etc/atomiadns.conf
		else
			echo "no config found"
			exit 1
		fi
	else
		if [ -z "$(grep "powerdns_db_hostname" /etc/atomiadns.conf)" ]; then
			cat /usr/share/atomia/conf/atomiadns.conf.atomiapowerdns-database >> /etc/atomiadns.conf
		fi
	fi

	TMPFILE=`mktemp /tmp/atomiadns.XXXXXXXXXX` || exit 1
	TMPFILE2=`mktemp /tmp/atomiadns.XXXXXXXXXX` || exit 1
	sed "s/%password/$password/g" < /etc/atomiadns.conf > "$TMPFILE" || exit 1
	mv "$TMPFILE" /etc/atomiadns.conf || exit 1
	chmod a+r /etc/atomiadns.conf || exit 1
	sed "s/%password/$password/g" < /usr/share/atomia/conf/pdns.conf > "$TMPFILE2" || exit 1
	mkdir -p /etc/powerdns || exit 1
	mv "$TMPFILE2" /etc/powerdns/pdns.conf || exit 1
	chmod a+r /etc/powerdns/pdns.conf || exit 1

	mysql --defaults-file=/etc/mysql/debian.cnf -e "CREATE DATABASE powerdns" > /dev/null 2>&1
	if [ $? != 0 ]; then
		echo "error creating database powerdns, you will have to make sure that the schema matches /usr/share/atomiadns/powerdns.sql manually"
		exit 1
	fi

	mysql --defaults-file=/etc/mysql/debian.cnf -e 'GRANT ALL ON powerdns.* TO `powerdns`@`localhost` IDENTIFIED BY '"'$password'" > /dev/null 2>&1
	if [ $? != 0 ]; then
		echo "error granting access to powerdns user, you will have to make sure that the schema matches /usr/share/atomiadns/powerdns.sql manually"
		exit 1
	fi

	mysql --defaults-file=/etc/mysql/debian.cnf powerdns < /usr/share/atomiadns/powerdns.sql > /dev/null 2>&1
	if [ $? != 0 ]; then
		echo "error importing schema, you will have to make sure that the schema matches /usr/share/atomiadns/powerdns.sql manually"
		exit 1
	fi
}

execute_query() {
	query="$1"

	mysql --defaults-file=/etc/mysql/debian.cnf powerdns -e "$query" > /dev/null 2>&1
	if [ $? != 0 ]; then
		echo "error executing migration query: $query, you'll have to migrate the schema manually."
		exit 1
	fi
}

set_schema_version() {
	execute_query "UPDATE powerdns_schemaversion SET version = $1"
}

db_exists=`mysql --defaults-file=/etc/mysql/debian.cnf -s -e "show databases like 'powerdns'"`
if [ $? = 0 ]] && [ -n "$db_exists" ]; then

	schema_version=`mysql --defaults-file=/etc/mysql/debian.cnf powerdns -Nse "SELECT version FROM powerdns_schemaversion" 2> /dev/null`
	if [ $? != 0 ] || [ -z "$schema_version" ]; then
		echo "database powerdns already exist, but doesn't contain the atomiadns powerdns schema. You will have to make sure that the schema matches /usr/share/atomiadns/powerdns.sql manually"
		echo "if this is an upgrade that fails, and you know that powerdns worked before, then just do:"
		echo "mysql --defaults-file=/etc/mysql/debian.cnf powerdns -e 'CREATE TABLE powerdns_schemaversion (version INT); INSERT INTO powerdns_schemaversion VALUES (1)'"
		exit 1
	else
		latest_version="10"

		if [ "$schema_version" = "$latest_version" ]; then
			echo "The installed schema is the latest version ($latest_version), keeping the database as it is."
		elif [ -n "$(echo "$schema_version" | grep -E '^[0-9]+$')" ] && [ "$schema_version" -lt "$latest_version" ]; then
			echo "Schema version is $schema_version, and the latest database schema is version $latest_version. Upgrading."

			if [ "$schema_version" -lt 2 ]; then
				execute_query "ALTER TABLE domains CHANGE COLUMN id id bigint NOT NULL AUTO_INCREMENT"
				execute_query "ALTER TABLE records CHANGE COLUMN id id bigint NOT NULL AUTO_INCREMENT"
			fi

			if [ "$schema_version" -lt 5 ]; then
				execute_query 'CREATE TABLE `outbound_tsig_keys` (`id` bigint NOT NULL AUTO_INCREMENT, `domain_id` int(11) DEFAULT NULL, `secret` varchar(255) DEFAULT NULL, `name` varchar(255) DEFAULT NULL, PRIMARY KEY (`id`), KEY `domain_index` (`domain_id`)) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=latin1'

				execute_query 'ALTER VIEW cryptokeys AS select `c`.`id` AS `id`,`d`.`id` AS `domain_id`,`c`.`flags` AS `flags`,`c`.`active` AS `active`,`c`.`content` AS `content` from (`domains` `d` join `global_cryptokeys` `c`) where d.type = '"'NATIVE'"

				execute_query "CREATE VIEW tsigkeys AS select CONCAT('key', k.id, ':', LOWER(k.name)) AS name, 'hmac-md5' AS algorithm, k.secret from outbound_tsig_keys k"
			fi

			if [ "$schema_version" -lt 7 ]; then
				execute_query 'ALTER VIEW domainmetadata AS select `domains`.`id` AS `domain_id`,`global_domainmetadata`.`kind` AS `kind`,`global_domainmetadata`.`content` AS `content` from (`domains` join `global_domainmetadata`) where ((select count(*) from global_cryptokeys) > 0 AND domains.type = '"'NATIVE') OR domains.type = 'MASTER' union select d.id, 'AXFR-MASTER-TSIG', CONCAT('key', k.id, ':', LOWER(k.name)) from outbound_tsig_keys k inner join domains d on k.domain_id = d.id where d.type = 'SLAVE'"
			fi

			if [ "$schema_version" -lt 8 ]; then
				execute_query "ALTER TABLE records CHANGE COLUMN content content text DEFAULT NULL"
			fi

			if [ "$schema_version" -lt 10 ]; then
				execute_query "
CREATE OR REPLACE VIEW domainmetadata AS
SELECT
  d.id AS domain_id,
  IF(d.type IN ('NATIVE', 'MASTER'), IF(g.kind IS NULL, gp.kind, g.kind), 'AXFR-MASTER-TSIG') AS kind,
  IF(d.type IN ('NATIVE', 'MASTER'),
    IF(g.kind IS NULL, gp.content, g.content),
    concat('key', k.id, ':', lcase(k.name))) AS content
FROM domains d
LEFT JOIN global_domainmetadata g ON d.type IN ('NATIVE', 'MASTER') AND
  (SELECT count(0) FROM global_cryptokeys) > 0
LEFT JOIN global_domainmetadata gp ON g.kind IS NULL AND d.type = 'MASTER' AND
  (SELECT count(0) FROM global_cryptokeys) = 0
LEFT JOIN outbound_tsig_keys k ON k.domain_id = d.id AND d.type = 'SLAVE'
WHERE d.type IN ('NATIVE', 'MASTER', 'SLAVE')"
			fi

			set_schema_version "$latest_version"
		else
			echo "database powerdns already exist, but contains a bad schema version ($schema_version), this should never happen and indicates a bug."
			exit 1
		fi
	fi
else
	echo "No schema installed, installing into powerdns."
	createschema
fi
